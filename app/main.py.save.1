Grays-MBP:autopilot-api grayadkins$ lsof -nP -iTCP:8010 -sTCP:LISTEN | awk 'NR>1{print $2}' | xargs -r kill -9
Grays-MBP:autopilot-api grayadkins$ source .venv/bin/activate
(.venv) Grays-MBP:autopilot-api grayadkins$ uvicorn app.main:app --reload --port 8010
INFO:     Will watch for changes in these directories: ['/Users/grayadkins/autopilot-clean/autopilot-api']
INFO:     Uvicorn running on http://127.0.0.1:8010 (Press CTRL+C to quit)
INFO:     Started reloader process [1484] using WatchFiles
Process SpawnProcess-1:
Traceback (most recent call last):
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/grayadkins/autopilot-clean/autopilot-api/.venv/lib/python3.8/site-packages/uvicorn/_subprocess.py", line 80, in subprocess_started
    target(sockets=sockets)
  File "/Users/grayadkins/autopilot-clean/autopilot-api/.venv/lib/python3.8/site-packages/uvicorn/server.py", line 65, in run
    return asyncio.run(self.serve(sockets=sockets))
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/asyncio/runners.py", line 44, in run
    return loop.run_until_complete(main)
  File "uvloop/loop.pyx", line 1518, in uvloop.loop.Loop.run_until_complete
  File "/Users/grayadkins/autopilot-clean/autopilot-api/.venv/lib/python3.8/site-packages/uvicorn/server.py", line 69, in serve
    await self._serve(sockets)
  File "/Users/grayadkins/autopilot-clean/autopilot-api/.venv/lib/python3.8/site-packages/uvicorn/server.py", line 76, in _serve
    config.load()
  File "/Users/grayadkins/autopilot-clean/autopilot-api/.venv/lib/python3.8/site-packages/uvicorn/config.py", line 434, in load
    self.loaded_app = import_from_string(self.app)
  File "/Users/grayadkins/autopilot-clean/autopilot-api/.venv/lib/python3.8/site-packages/uvicorn/importer.py", line 19, in import_from_string
    module = importlib.import_module(module_str)
  File "/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1014, in _gcd_import
  File "<frozen importlib._bootstrap>", line 991, in _find_and_load
  File "<frozen importlib._bootstrap>", line 975, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 671, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 779, in exec_module
  File "<frozen importlib._bootstrap_external>", line 916, in get_code
  File "<frozen importlib._bootstrap_external>", line 846, in source_to_code
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/Users/grayadkins/autopilot-clean/autopilot-api/app/main.py", line 121
    }≈
     ^
SyntaxError: invalid character in identifier

from typing import Optional, List
import os

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr
import httpx

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr
import os
import httpx
from supabase import create_client, Client

# --- App setup ---
app = FastAPI(title="Autopilot API", version="0.1.0")

# ✅ Restrict CORS to your domains only
origins = ["https://*.vercel.app", "https://ai-marketing-autopilot.vercel.app"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Environment ---
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
supabase: Client = None
if SUPABASE_URL and SUPABASE_KEY:
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- Models ---
class LeadIn(BaseModel):
    email: EmailStr
    name: str = None
    source: str = None

# --- Routes ---
@app.get("/")
def root():
    return {"message": "Welcome to Autopilot API"}

@app.get("/health")
def health():
    return {"ok": True}

@app.get("/version")
def version():
    return {"version": "0.1.0"}

@app.get("/_routes")
def routes():
    return {"routes": [r.path for r in app.routes]}

@app.get("/env-check")
def env_check():
    return {
        "SUPABASE_URL_present": bool(SUPABASE_URL),
        "SUPABASE_ANON_KEY_present": bool(SUPABASE_KEY),
    }

@app.get("/test-db")
async def test_db():
    if not SUPABASE_URL or not SUPABASE_KEY:
        return {"ok": False, "error": "Missing Supabase envs on server"}
    async with httpx.AsyncClient() as client:
        r = await client.get(f"{SUPABASE_URL}/auth/v1/settings",
                             headers={"apikey": SUPABASE_KEY})
        return {"ok": r.status_code == 200, "status": r.status_code, "url": r.url.human_repr()}

@app.get("/leads")
def get_leads():
    if not supabase:
        raise HTTPException(status_code=500, detail="Supabase env vars missing")
    data = supabase.table("leads").select("*").execute()
    return data.data

@app.post("/leads")
def create_lead(lead: LeadIn):
    if not supabase:
        raise HTTPException(status_code=500, detail="Supabase env vars missing")
    data = supabase.table("leads").insert(lead.dict()).execute()
    return data.data
# ---- App + CORS ----
app = FastAPI(title="Autopilot API", version="0.1.0")
app.add_middleware(
    CORSMiddleware,
    allow_origin_regex=r"https://.*\.vercel\.app$",
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ---- Simple health/version/routes ----
@app.get("/")
def root():
    return {"status": "ok", "msg": "Autopilot API root"}

@app.get("/health")
def health():
    return {"ok": True}

@app.get("/version")
def version():
    return {"version": "0.1.0"}

@app.get("/_routes")
def routes():
    return {"routes": [r.path for r in app.routes]}

# ---- Env check + Supabase network check ----
@app.get("/env-check")
def env_check():
    return {
        "SUPABASE_URL_present": bool(os.getenv("https://aggorhmzuhdirterhyej.supabase.co")),
        "SUPABASE_ANON_KEY_present": bool(os.getenv("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFnZ29yaG16dWhkaXJ0ZXJoeWVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU4MDU0MTAsImV4cCI6MjA3MTM4MTQxMH0.3eFQjOK_P2fV3UcbH6BC_OB5UcvJPf43Eb9ze8gQyAc")),
    }≈

@app.get("/test-db")
def test_db():
    url = os.getenv("SUPABASE_URL", "").rstrip("/")
    key = os.getenv("SUPABASE_ANON_KEY", "")
    if not url or not key:
        return {"ok": False, "error": "Missing Supabase envs on server"}

    targets = [f"{url}/auth/v1/settings", f"{url}/auth/v1/info"]
    tried = []
    for t in targets:
        try:
            r = httpx.get(t, headers={"apikey": key}, timeout=8.0)
            tried.append({"url": t, "status": r.status_code})
            if r.status_code == 200:
                return {"ok": True, "status": 200, "url": t}
        except Exception as e:
            tried.append({"url": t, "error": str(e)})
    return {"ok": False, "status": 404, "tried": tried}

# ---- Leads models ----
class LeadIn(BaseModel):
    email: EmailStr
    name: Optional[str] = None
    source: Optional[str] = None

class LeadOut(BaseModel):
    id: str
    email: EmailStr
    name: Optional[str] = None
    source: Optional[str] = None
    created_at: Optional[str] = None

# ---- Supabase client (lazy import so local dev works even if not installed) ----
def _sb():
    url = os.getenv("SUPABASE_URL")
    key = os.getenv("SUPABASE_ANON_KEY")
    if not url or not key:
        raise HTTPException(status_code=500, detail="Supabase env vars missing")
    try:
        from supabase import create_client, Client  # type: ignore
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Supabase client import failed: {e}")
    return create_client(url, key)

# ---- Leads endpoints ----
@app.get("/leads", response_model=List[LeadOut])
def list_leads():
    sb = _sb()
    resp = sb.table("leads").select("*").order("created_at", desc=True).limit(50).execute()
    return resp.data or []

@app.post("/leads", response_model=LeadOut)
def create_lead(payload: LeadIn):
    sb = _sb()
    # Upsert by email (optional): change to .insert if you prefer duplicates
    resp = sb.table("leads").upsert(
        {"email": payload.email, "name": payload.name, "source": payload.source},
        on_conflict="email"
    ).select("*").single().execute()
    if not resp.data:
        raise HTTPException(status_code=500, detail="Insert/upsert failed")
    return resp.data
# --- KPIs /metrics ---
from datetime import datetime, timedelta, timezone
from fastapi import HTTPException

@app.get("/metrics")
def metrics():
    url = os.getenv("https://aggorhmzuhdirterhyej.supabase.co")
    key = os.getenv("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFnZ29yaG16dWhkaXJ0ZXJoeWVqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU4MDU0MTAsImV4cCI6MjA3MTM4MTQxMH0.3eFQjOK_P2fV3UcbH6BC_OB5UcvJPf43Eb9ze8gQyAc")
    if not url or not key:
        raise HTTPException(status_code=500, detail="Supabase env vars missing")

    client = create_client(url, key)  # you already have create_client() in the file

    now = datetime.now(timezone.utc)
    start_today = now.replace(hour=0, minute=0, second=0, microsecond=0)
    last_7 = now - timedelta(days=7)
    last_30 = now - timedelta(days=30)

    # helpers
    def count_all(filters=None):
        q = client.table("leads").select("id", count="exact")
        if filters:
            for f in filters:
                q = q.filter(*f)
        data = q.execute()
        # data.count is populated by postgrest when count="exact"
        return data.count or 0

    total = count_all()
    today = count_all([("created_at", "gte", start_today.isoformat())])
    week = count_all([("created_at", "gte", last_7.isoformat())])
    month = count_all([("created_at", "gte", last_30.isoformat())])

    return {
        "total": total,
        "today": today,
        "last_7_days": week,
        "last_30_days": month,
        "utc_now": now.isoformat(),
    }

